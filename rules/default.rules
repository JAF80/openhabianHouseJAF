import org.openhab.model.script.actions.Timer
import org.openhab.core.library.types.DateTimeType

var Timer timerBathroomFan = null
var Timer timerBathroomHeater = null

var DateTime RoofEnabled
var DateTime RoofDisabled
var long TimeEnabled
var float Energy
var float Power = 10

rule SetDay
when
	System started or Time is midnight
then
	Date.postUpdate(new DateTimeType())
end

rule ControlHumidityInBathroomOnWeek
when
	Time cron "0 0/2 8-21 ? * MON-FRI"
then
	if ((Bathroom_Humidity.state >= 85) && (Bathroom_Fan.state == OFF)) {
		sendCommand(Bathroom_Fan, ON)
	} else {
		if ((Bathroom_Humidity.state < 80) && (Bathroom_Fan.state == ON)) {
			timerBathroomFan = createTimer(now.plusSeconds(1800)) [|
                                sendCommand(Bathroom_Fan, OFF)
                                timerBathroomFan = null
                        ]
		}
	}
end

rule ControlHumidityInBathroomOnWeekend
when
        Time cron "0 0/2 11-21 ? * SAT-SUN"
then
        if ((Bathroom_Humidity.state >= 85) && (Bathroom_Fan.state == OFF)) {
                sendCommand(Bathroom_Fan, ON)
        } else {
                if ((Bathroom_Humidity.state < 80) && (Bathroom_Fan.state == ON)) {
                        timerBathroomFan = createTimer(now.plusSeconds(1800)) [|
                                sendCommand(Bathroom_Fan, OFF)
                                timerBathroomFan = null
                        ]
                }
        }
end

rule StopFanAtNightInBathroom
when
	Time cron "0 0/2 22-00 ? * *"
then
	if (Bathroom_Fan.state == ON) {
		sendCommand(Bathroom_Fan, OFF)
//		timerBathroomFan.cancel()
//		timerBathroomFan = null
	}
end

rule shutdownBathroomHeaterTowel
when
	Item Bathroom_Towel_Heater received update ON
then
	timerBathroomHeater = createTimer(now.plusSeconds(3600)) [|
		sendCommand(Bathroom_Towel_Heater, OFF)
		timerBathroomHeater = null
	]
end

rule "Startup Init"
when
	System started
then
	RoofEnabled = now
	RoofDisabled = now
	TimeEnabled = 0
	Energy = TimeEnabled/1000 * Power
	Energy = Energy/3600
	EnergyTotal.postUpdate(Energy)
end

rule "Track roofCable On Off"
when
	Item Kitchen_Light changed
then
	if (Kitchen_Light == ON) {
		Roofenabled = now
	} else {
		RoofDisabled = now
		TimeEnabled = TimeEnabled + RoofDisabled.millis - RoofEnabled.millis
		Energy = TimeEnabled/1000 * Power
		Energy = Energy/3600
		EnergyTotal.postUpdate(Energy)
	}
end
