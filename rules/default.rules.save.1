import org.openhab.model.script.actions.Timer
import org.openhab.core.library.types.DateTimeType

var Timer timerBathroomFan = null
var Timer timerBathroomHeater = null
var Timer timerStorageroomLight = null
var Timer timerBedroomDoor = null

var Number valueHeaterTowel = 0
var Number valueFanBathroom = 0
var Number valueLightStorageroom = 0
var Number valueDoorBedroom = 1

var DateTime RoofEnabled
var DateTime RoofDisabled
var long TimeEnabled
var float Energy
var float Power = 10

var HomeSensorChartPeriod = 0
var FanCounter = 0
var InitValueHour = 60
var InitValueHalfHour = 30
var InitValueTenMinutes = 10
var InitValueFiveMinutes = 5

rule SetDay
when
	System started or Time is midnight
then
	Date.postUpdate(new DateTimeType())
	FanCounter = 0
end

rule ShutdownEquipmentAtNight
when
	Time cron "0 0 0 * * ?"
then
	if (Masterbedroom_Heater.state == ON) {
		sendCommand(Masterbedroom_Heater, OFF)
	}
	if (Office_Heater.state == ON) {
		sendCommand(Office_Heater.state, OFF)
	}
	if (Smallbedroom_Heater.state == ON) {
		sendCommand(Smallbedroom_Heater.state, OFF)
	}
	if (Bathroom_Towel_Heater.state == ON) {
		sendCommand(Bathroom_Towel_Heater.state, OFF)
	}
	if (Livingroom_HiFi.state == ON) {
		sendCommand(Livingroom_HiFi.state, OFF)
	}
end

rule ControlHumidityInBathroomOnWeek
when
	Time cron "0 0/2 8-21 ? * MON-FRI"
then
	if (Bathroom_Fan_Timer.state == NULL) Bathroom_Fan_Timer.postUpdate(InitValueHalfHour)

	valueFanBathroom = Bathroom_Fan_Timer.state as Number
	if ((Bathroom_Humidity.state >= 90) && (Bathroom_Fan.state == OFF) && (FanCounter < 2)) {
		sendCommand(Bathroom_Fan, ON)
		timerBathroomFan = createTimer(now.plusMinutes(valueFanBathroom.intValue)) [|
                	sendCommand(Bathroom_Fan, OFF)
                        timerBathroomFan = null
			FanCounter = FanCounter + 1
                ]
		var count = valueFanBathroom
		while(count >= 0) {
			Countdown_Bathroom_Fan.postUpdate(count)
			count = count - 1
			Thread::sleep(60000)
		}
	}
end

rule ControlHumidityInBathroomOnWeekend
when
        Time cron "0 0/2 11-21 ? * SAT-SUN"
then
	if (Bathroom_Fan_Timer.state == NULL) Bathroom_Fan_Timer.postUpdate(InitValueHalfHour)

	valueFanBathroom = Bathroom_Fan_Timer.state as Number
        if ((Bathroom_Humidity.state >= 90) && (Bathroom_Fan.state == OFF)) {
                sendCommand(Bathroom_Fan, ON)
                timerBathroomFan = createTimer(now.plusMinutes(valueFanBathroom.intValue)) [|
                	sendCommand(Bathroom_Fan, OFF)
                        timerBathroomFan = null
                ]
		var count = valueFanBathroom
                while(count >= 0) {
                        Countdown_Bathroom_Fan.postUpdate(count)
                        count = count - 1
                        Thread::sleep(60000)
                }
        }
end

rule StopFanAtNightInBathroom
when
	Time cron "0 0/2 22-00 ? * *"
then
	if (Bathroom_Fan.state == ON) {
		sendCommand(Bathroom_Fan, OFF)
		timerBathroomFan = null
	}
end

rule ShutdownBathroomHeaterTowel
when
	Item Bathroom_Towel_Heater received update ON
then
	if (Bathroom_Towel_Heater_Timer.state == NULL) Bathroom_Towel_Heater_Timer.postUpdate(InitValueHour)

	valueHeaterTowel = Bathroom_Towel_Heater_Timer.state as Number
	timerBathroomHeater = createTimer(now.plusMinutes(valueHeaterTowel.intValue)) [|
		sendCommand(Bathroom_Towel_Heater, OFF)
		timerBathroomHeater = null
	]
	var count = valueHeaterTowel
	while(count >= 0) {
		Countdown_Bathroom_Towel_Heater.postUpdate(count)
		count = count - 1
		Thread::sleep(60000)
	}
end

rule "Startup Init"
when
	System started
then
	RoofEnabled = now
	RoofDisabled = now
	TimeEnabled = 0
	Energy = TimeEnabled/1000 * Power
	Energy = Energy/3600
	EnergyTotal.postUpdate(Energy)
end

rule "Track roofCable On Off"
when
	Item Kitchen_Light changed
then
	if (Kitchen_Light == ON) {
		Roofenabled = now
	} else {
		RoofDisabled = now
		TimeEnabled = TimeEnabled + RoofDisabled.millis - RoofEnabled.millis
		Energy = TimeEnabled/1000 * Power
		Energy = Energy/3600
		EnergyTotal.postUpdate(Energy)
	}
end

rule PirDectectObject
when
	Item StorageRoom_PIR received update
then
	if (Storageroom_Light_Timer.state == NULL) Storageroom_Light_Timer.postUpdate(InitValueFiveMinutes)
	valueLightStorageroom = Storageroom_Light_Timer.state as Number

	if (RF_Message.state == "EDFCDE") {
		if (Storageroom_Light.state == OFF) {
			sendCommand(Storageroom_Light, ON)
			timerStorageroomLight = createTimer(now.plusMinutes(valueLightStorageroom.intValue)) [|
				sendCommand(Storageroom_Light, OFF)
				timerStorageroomLight = null
			]
			var count = valueLightStorageroom
			while(count >= 0) {
				Countdown_Storageroom_Light.postUpdate(count)
				count = count - 1
				Thread::sleep(60000)
			}
		}
	}
	
	if (RF_Message.state == "3010A2") {
		if (Storageroom_Light.state == OFF) {
			sendCommand(Storageroom_Light, ON)
		} else {
			if (Storageroom_Light.state == ON) {
				sendCommand(Storageroom_Light, OFF)
			}
		}
	}

	if (RF_Message.state == "A8B4B9") {
                sendCommand(Bedroom_Door_Detector_Value, ON)
                timerBedroomDoor = createTimer(now.plusMinutes(valueDoorBedroom.intValue)) [|
                        sendCommand(Bedroom_Door_Detector_Value, OFF)
                        timervodaStorageroomLight = null
                ]
        }
end

rule UserOutOfHouse
when
	Item gPresence changed to OFF
then
	sendCommand(Office_Heater, OFF)
	sendCommand(Masterbedroom_Heater, OFF)
	sendCommand(Livingroom_Light_Support, OFF)
	sendCommand(Livingroom_HiFi, OFF)
	sendCommand(Masterbedroom_Light, OFF)
end
